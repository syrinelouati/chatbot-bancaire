# -*- coding: utf-8 -*-
"""chatbot_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LfmGKAnJHXg1qZyR79f1FqyeZ2qLZTpj
"""
import pandas as pd
from sentence_transformers import SentenceTransformer, util
from sklearn.neighbors import NearestNeighbors
from langdetect import detect
import streamlit as st
import os

# R√©glage n√©cessaire pour √©viter certains bugs avec Streamlit sur certains environnements
os.environ["STREAMLIT_WATCHER_TYPE"] = "none"

# Titre
st.title("ü§ñ Chatbot Bancaire Multilingue")

# Chargement du mod√®le de phrases multilingue
@st.cache_resource
def load_model():
    return SentenceTransformer("sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2")

model = load_model()

# Chargement du dataset
@st.cache_data
def load_data():
    df = pd.read_csv("cleanedTranslatedBankFAQs.csv")
    return df

df = load_data()

# Interface utilisateur
user_profile = st.text_input("üë§ Entrez votre profil (client, agent, etc.)")
user_question = st.text_area("‚ùì Posez votre question bancaire")

if st.button("Obtenir la r√©ponse"):
    if user_question and user_profile:
        # D√©tection automatique de la langue de la question
        try:
            langue = detect(user_question)
        except:
            langue = "en"  # fallback

        # S√©lection des colonnes selon la langue d√©tect√©e
        if langue.startswith("fr"):
            col_question = "Question_fr"
            col_answer = "Answer_fr"
            col_profile = "Profile_fr"
            col_class = "Class_fr"
        elif langue.startswith("ar"):
            col_question = "Question_ar"
            col_answer = "Answer_ar"
            col_profile = "Profile_ar"
            col_class = "Class_ar"
        else:
            col_question = "Question"
            col_answer = "Answer"
            col_profile = "Profile"
            col_class = "Class"

        # Cr√©ation d'une colonne combin√©e pour la recherche : profil + question
        df["full_question"] = df[col_profile].fillna('') + " - " + df[col_question].fillna('')

        # Filtrage selon le profil saisi
        df_filtered = df[df[col_profile].str.lower().str.contains(user_profile.lower(), na=False)]

        if df_filtered.empty:
            st.warning("‚ö†Ô∏è Aucun r√©sultat trouv√© pour ce profil dans cette langue.")
        else:
            # Encodage et recherche de la question la plus similaire
            question_embeddings = model.encode(df_filtered["full_question"].tolist(), convert_to_tensor=True)
            input_embedding = model.encode([user_profile + " - " + user_question], convert_to_tensor=True)

            scores = util.pytorch_cos_sim(input_embedding, question_embeddings)[0]
            best_index = scores.argmax().item()

            # Affichage de la r√©ponse
            response = df_filtered.iloc[best_index][col_answer]
            classe = df_filtered.iloc[best_index][col_class]

            st.success(f"üí¨ **R√©ponse :** {response}")
            st.info(f"üìÇ **Classe :** {classe}")
    else:
        st.warning("‚ö†Ô∏è Veuillez fournir votre profil et votre question.")
