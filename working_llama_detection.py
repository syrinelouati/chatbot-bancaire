# -*- coding: utf-8 -*-
"""working_llama_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NtS1B8my9ZwyY2Fe2JzIr1EkDNWUrP2k
"""

!pip install groq
from groq import Groq
import os

# Set API key directly
os.environ["GROQ_API_KEY"] = "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"

# Now create the client
client = Groq()
from PIL import Image
import io
import base64
import json


def encode_image(image_path):
    """Encodes an image file to base64 string."""
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode("utf-8")


def extract_invoice_data(base64_image):
    system_prompt = """
    You are an OCR-like data extraction tool that extracts hotel invoice data from images.

    1. Please extract the data in this hotel invoice, grouping data according to theme/sub groups, and then output into JSON.

    2. Please keep the keys and values of the JSON in the original language.

    3. The type of data you might encounter in the invoice includes but is not limited to: hotel information, guest information, invoice information,
       room charges, taxes, and total charges etc.

    4. If the page contains no charge data, please output an empty JSON object and don't make up any data.

    5. If there are blank data fields in the invoice, include them as "null" values in the JSON object.

    6. If there are tables in the invoice, capture all rows and columns in the JSON object.
       Even if a column is blank, include it as a key in the JSON object with a null value.

    7. If a row is blank, denote missing fields with "null" values.

    8. Don't interpolate or make up data.

    9. Please maintain the table structure of the charges, i.e. capture all rows and columns in the JSON object.
    """

    response = client.chat.completions.create(
        model="meta-llama/llama-4-scout-17b-16e-instruct",
        response_format={"type": "json_object"},
        messages=[
            {
                "role": "system",
                "content": system_prompt
            },
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": "Extract the data in this hotel invoice and output into JSON."},
                    {"type": "image_url", "image_url": {"url": f"data:image/png;base64,{base64_image}", "detail": "high"}}
                ]
            }
        ],
        temperature=0.0,
    )
    return response.choices[0].message.content


def extract_from_image(image_path, output_directory):
    base64_image = encode_image(image_path)
    invoice_json = extract_invoice_data(base64_image)
    invoice_data = json.loads(invoice_json)

    filename = os.path.basename(image_path)
    output_filename = os.path.join(output_directory, filename.replace(".jpg", ".json").replace(".png", ".json"))

    # Ensure output directory exists
    os.makedirs(output_directory, exist_ok=True)

    # Save JSON
    with open(output_filename, 'w', encoding='utf-8') as f:
        json.dump(invoice_data, f, ensure_ascii=False, indent=4)

    return output_filename


def main_extract(read_path, write_path):
    supported_extensions = ('.png', '.jpg', '.jpeg')

    for filename in os.listdir(read_path):
        if filename.lower().endswith(supported_extensions):
            file_path = os.path.join(read_path, filename)
            print(f"Processing {filename}...")
            extract_from_image(file_path, write_path)


# Example usage
read_path = "/content"
write_path = "/content/extracted_info_json"

main_extract(read_path, write_path)









